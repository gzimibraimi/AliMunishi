{"ast":null,"code":"const express = require(\"express\");\nconst cors = require(\"cors\");\nconst xlsx = require(\"xlsx\");\nconst path = require(\"path\");\nconst app = express();\napp.use(cors());\napp.use(express.json());\nconst EXCEL_FILE = path.join(__dirname, \"data.xlsx\");\n\n// Funksion për të lexuar fletët\nfunction readExcel() {\n  const workbook = xlsx.readFile(EXCEL_FILE);\n  const consumers = xlsx.utils.sheet_to_json(workbook.Sheets[\"consumers\"]);\n  const readings = xlsx.utils.sheet_to_json(workbook.Sheets[\"readings\"]);\n  return {\n    workbook,\n    consumers,\n    readings\n  };\n}\n\n// Funksion për të shkruar në Excel\nfunction writeExcel(workbook) {\n  xlsx.writeFile(workbook, EXCEL_FILE);\n}\n\n// API për të marrë konsumatorët\napp.get(\"/api/consumers\", (req, res) => {\n  try {\n    const {\n      consumers\n    } = readExcel();\n    res.json(consumers);\n  } catch (err) {\n    res.status(500).json({\n      error: \"Gabim gjatë marrjes së konsumatorëve\"\n    });\n  }\n});\n\n// API për të marrë leximet e një konsumatori\napp.get(\"/api/readings/:consumerId\", (req, res) => {\n  try {\n    const consumerId = parseInt(req.params.consumerId);\n    const {\n      readings\n    } = readExcel();\n    const filteredReadings = readings.filter(r => r.consumerId === consumerId);\n    res.json(filteredReadings);\n  } catch (err) {\n    res.status(500).json({\n      error: \"Gabim gjatë marrjes së leximeve\"\n    });\n  }\n});\n\n// API për të shtuar një lexim të ri\napp.post(\"/api/readings\", (req, res) => {\n  try {\n    const newReading = req.body;\n    const {\n      workbook,\n      readings\n    } = readExcel();\n\n    // Gjenero ID të ri (max ID + 1)\n    const maxId = readings.reduce((max, r) => r.id > max ? r.id : max, 0);\n    newReading.id = maxId + 1;\n\n    // Siguro që fushat janë në rendin e duhur për Excel-in\n    const newRow = [newReading.id, newReading.consumerId, newReading.previousReading, newReading.currentReading, newReading.consumption, newReading.total, newReading.date];\n\n    // Merr sheet-in e leximeve\n    const ws = workbook.Sheets[\"readings\"];\n\n    // Merr të dhënat ekzistuese si array (rresht e kolona)\n    const data = xlsx.utils.sheet_to_json(ws, {\n      header: 1\n    });\n\n    // Shto rreshtin e ri në fund\n    data.push(newRow);\n\n    // Konverto përsëri në worksheet\n    const newSheet = xlsx.utils.aoa_to_sheet(data);\n    workbook.Sheets[\"readings\"] = newSheet;\n\n    // Shkruaj në Excel\n    writeExcel(workbook);\n    res.status(201).json(newReading);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({\n      error: \"Gabim gjatë ruajtjes së leximit\"\n    });\n  }\n});\nconst PORT = 5000;\napp.listen(PORT, () => {\n  console.log(`Server po funksionon në portin ${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","xlsx","path","app","use","json","EXCEL_FILE","join","__dirname","readExcel","workbook","readFile","consumers","utils","sheet_to_json","Sheets","readings","writeExcel","writeFile","get","req","res","err","status","error","consumerId","parseInt","params","filteredReadings","filter","r","post","newReading","body","maxId","reduce","max","id","newRow","previousReading","currentReading","consumption","total","date","ws","data","header","push","newSheet","aoa_to_sheet","console","PORT","listen","log"],"sources":["D:/AliMunishiApp/frontend/src/pages/Readings.jsx"],"sourcesContent":["const express = require(\"express\");\r\nconst cors = require(\"cors\");\r\nconst xlsx = require(\"xlsx\");\r\nconst path = require(\"path\");\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\nconst EXCEL_FILE = path.join(__dirname, \"data.xlsx\");\r\n\r\n// Funksion për të lexuar fletët\r\nfunction readExcel() {\r\n  const workbook = xlsx.readFile(EXCEL_FILE);\r\n  const consumers = xlsx.utils.sheet_to_json(workbook.Sheets[\"consumers\"]);\r\n  const readings = xlsx.utils.sheet_to_json(workbook.Sheets[\"readings\"]);\r\n  return { workbook, consumers, readings };\r\n}\r\n\r\n// Funksion për të shkruar në Excel\r\nfunction writeExcel(workbook) {\r\n  xlsx.writeFile(workbook, EXCEL_FILE);\r\n}\r\n\r\n// API për të marrë konsumatorët\r\napp.get(\"/api/consumers\", (req, res) => {\r\n  try {\r\n    const { consumers } = readExcel();\r\n    res.json(consumers);\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Gabim gjatë marrjes së konsumatorëve\" });\r\n  }\r\n});\r\n\r\n// API për të marrë leximet e një konsumatori\r\napp.get(\"/api/readings/:consumerId\", (req, res) => {\r\n  try {\r\n    const consumerId = parseInt(req.params.consumerId);\r\n    const { readings } = readExcel();\r\n    const filteredReadings = readings.filter(r => r.consumerId === consumerId);\r\n    res.json(filteredReadings);\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Gabim gjatë marrjes së leximeve\" });\r\n  }\r\n});\r\n\r\n// API për të shtuar një lexim të ri\r\napp.post(\"/api/readings\", (req, res) => {\r\n  try {\r\n    const newReading = req.body;\r\n    const { workbook, readings } = readExcel();\r\n\r\n    // Gjenero ID të ri (max ID + 1)\r\n    const maxId = readings.reduce((max, r) => (r.id > max ? r.id : max), 0);\r\n    newReading.id = maxId + 1;\r\n\r\n    // Siguro që fushat janë në rendin e duhur për Excel-in\r\n    const newRow = [\r\n      newReading.id,\r\n      newReading.consumerId,\r\n      newReading.previousReading,\r\n      newReading.currentReading,\r\n      newReading.consumption,\r\n      newReading.total,\r\n      newReading.date\r\n    ];\r\n\r\n    // Merr sheet-in e leximeve\r\n    const ws = workbook.Sheets[\"readings\"];\r\n\r\n    // Merr të dhënat ekzistuese si array (rresht e kolona)\r\n    const data = xlsx.utils.sheet_to_json(ws, { header: 1 });\r\n\r\n    // Shto rreshtin e ri në fund\r\n    data.push(newRow);\r\n\r\n    // Konverto përsëri në worksheet\r\n    const newSheet = xlsx.utils.aoa_to_sheet(data);\r\n    workbook.Sheets[\"readings\"] = newSheet;\r\n\r\n    // Shkruaj në Excel\r\n    writeExcel(workbook);\r\n\r\n    res.status(201).json(newReading);\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ error: \"Gabim gjatë ruajtjes së leximit\" });\r\n  }\r\n});\r\n\r\nconst PORT = 5000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server po funksionon në portin ${PORT}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}