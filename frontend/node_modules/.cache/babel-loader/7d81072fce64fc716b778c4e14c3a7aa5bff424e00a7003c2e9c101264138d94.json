{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import\"../styles/dashboard.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Dashboard=()=>{const[consumers,setConsumers]=useState([]);const[readings,setReadings]=useState([]);useEffect(()=>{const API=process.env.REACT_APP_API_URL;fetch(\"\".concat(API,\"/consumers\")).then(res=>res.json()).then(data=>{if(Array.isArray(data))setConsumers(data);else setConsumers([]);}).catch(()=>setConsumers([]));fetch(\"\".concat(API,\"/readings\")).then(res=>res.json()).then(data=>{if(Array.isArray(data))setReadings(data);else setReadings([]);}).catch(()=>setReadings([]));},[]);const totalConsumers=consumers.length;const biznesCount=consumers.filter(c=>c.type===\"Biznes\").length;const individualCount=consumers.filter(c=>c.type===\"Amviseri\").length;// Përllogaritje për muajin aktual\nconst now=new Date();const currentMonth=now.getMonth();const currentYear=now.getFullYear();const readingsThisMonth=readings.filter(r=>{const date=new Date(r.date);return date.getMonth()===currentMonth&&date.getFullYear()===currentYear;});// Konsumi total në muajin aktual - siguro parseFloat për rast string\nconst totalConsumptionThisMonth=readingsThisMonth.reduce((acc,r)=>acc+(parseFloat(r.consumption)||0),0);// Pagesat totale për muajin aktual\nconst totalPaymentsThisMonth=readingsThisMonth.reduce((acc,r)=>acc+(parseFloat(r.total)||0),0);// Konsumatori me konsum më të lartë këtë muaj\nlet topConsumer=null;if(readingsThisMonth.length>0){const consumptionByConsumer={};readingsThisMonth.forEach(r=>{consumptionByConsumer[r.consumerId]=(consumptionByConsumer[r.consumerId]||0)+(parseFloat(r.consumption)||0);});const maxConsumption=Math.max(...Object.values(consumptionByConsumer));const topConsumerId=Object.keys(consumptionByConsumer).find(id=>consumptionByConsumer[id]===maxConsumption);topConsumer=consumers.find(c=>c.id===Number(topConsumerId));}// Numri i leximeve këtë muaj\nconst readingsCountThisMonth=readingsThisMonth.length;return/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Dashboard\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"cards\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Totali i Konsumator\\xEBve\"}),/*#__PURE__*/_jsx(\"p\",{children:totalConsumers})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Biznes\"}),/*#__PURE__*/_jsx(\"p\",{children:biznesCount})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Amvis\\xEBri\"}),/*#__PURE__*/_jsx(\"p\",{children:individualCount})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Konsumi Total Mujor (m\\xB3)\"}),/*#__PURE__*/_jsx(\"p\",{children:totalConsumptionThisMonth.toFixed(2)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Pagesat Totale Mujor (MKD)\"}),/*#__PURE__*/_jsx(\"p\",{children:totalPaymentsThisMonth.toFixed(2)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Konsumatori me Konsumin m\\xEB t\\xEB Lart\\xEB\"}),/*#__PURE__*/_jsx(\"p\",{children:topConsumer?\"\".concat(topConsumer.name,\" \").concat(topConsumer.surname):\"Nuk ka lexime\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Numri i Leximeve Mujore\"}),/*#__PURE__*/_jsx(\"p\",{children:readingsCountThisMonth})]})]})]});};export default Dashboard;","map":{"version":3,"names":["React","useEffect","useState","jsx","_jsx","jsxs","_jsxs","Dashboard","consumers","setConsumers","readings","setReadings","API","process","env","REACT_APP_API_URL","fetch","concat","then","res","json","data","Array","isArray","catch","totalConsumers","length","biznesCount","filter","c","type","individualCount","now","Date","currentMonth","getMonth","currentYear","getFullYear","readingsThisMonth","r","date","totalConsumptionThisMonth","reduce","acc","parseFloat","consumption","totalPaymentsThisMonth","total","topConsumer","consumptionByConsumer","forEach","consumerId","maxConsumption","Math","max","Object","values","topConsumerId","keys","find","id","Number","readingsCountThisMonth","className","children","toFixed","name","surname"],"sources":["D:/AliMunishiApp/frontend/src/pages/Dashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"../styles/dashboard.css\";\r\n\r\nconst Dashboard = () => {\r\n  const [consumers, setConsumers] = useState([]);\r\n  const [readings, setReadings] = useState([]);\r\n\r\nuseEffect(() => {\r\n  const API = process.env.REACT_APP_API_URL;\r\n\r\n  fetch(`${API}/consumers`)\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      if (Array.isArray(data)) setConsumers(data);\r\n      else setConsumers([]);\r\n    })\r\n    .catch(() => setConsumers([]));\r\n\r\n  fetch(`${API}/readings`)\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      if (Array.isArray(data)) setReadings(data);\r\n      else setReadings([]);\r\n    })\r\n    .catch(() => setReadings([]));\r\n}, []);\r\n\r\n  const totalConsumers = consumers.length;\r\n  const biznesCount = consumers.filter((c) => c.type === \"Biznes\").length;\r\n  const individualCount = consumers.filter((c) => c.type === \"Amviseri\").length;\r\n\r\n  // Përllogaritje për muajin aktual\r\n  const now = new Date();\r\n  const currentMonth = now.getMonth();\r\n  const currentYear = now.getFullYear();\r\n\r\n  const readingsThisMonth = readings.filter((r) => {\r\n    const date = new Date(r.date);\r\n    return date.getMonth() === currentMonth && date.getFullYear() === currentYear;\r\n  });\r\n\r\n  // Konsumi total në muajin aktual - siguro parseFloat për rast string\r\n  const totalConsumptionThisMonth = readingsThisMonth.reduce(\r\n    (acc, r) => acc + (parseFloat(r.consumption) || 0),\r\n    0\r\n  );\r\n\r\n  // Pagesat totale për muajin aktual\r\n  const totalPaymentsThisMonth = readingsThisMonth.reduce(\r\n    (acc, r) => acc + (parseFloat(r.total) || 0),\r\n    0\r\n  );\r\n\r\n  // Konsumatori me konsum më të lartë këtë muaj\r\n  let topConsumer = null;\r\n  if (readingsThisMonth.length > 0) {\r\n    const consumptionByConsumer = {};\r\n    readingsThisMonth.forEach((r) => {\r\n      consumptionByConsumer[r.consumerId] =\r\n        (consumptionByConsumer[r.consumerId] || 0) + (parseFloat(r.consumption) || 0);\r\n    });\r\n    const maxConsumption = Math.max(...Object.values(consumptionByConsumer));\r\n    const topConsumerId = Object.keys(consumptionByConsumer).find(\r\n      (id) => consumptionByConsumer[id] === maxConsumption\r\n    );\r\n    topConsumer = consumers.find((c) => c.id === Number(topConsumerId));\r\n  }\r\n\r\n  // Numri i leximeve këtë muaj\r\n  const readingsCountThisMonth = readingsThisMonth.length;\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2>Dashboard</h2>\r\n      <div className=\"cards\">\r\n        <div className=\"card\">\r\n          <h3>Totali i Konsumatorëve</h3>\r\n          <p>{totalConsumers}</p>\r\n        </div>\r\n        <div className=\"card\">\r\n          <h3>Biznes</h3>\r\n          <p>{biznesCount}</p>\r\n        </div>\r\n        <div className=\"card\">\r\n          <h3>Amvisëri</h3>\r\n          <p>{individualCount}</p>\r\n        </div>\r\n        <div className=\"card\">\r\n          <h3>Konsumi Total Mujor (m³)</h3>\r\n          <p>{totalConsumptionThisMonth.toFixed(2)}</p>\r\n        </div>\r\n        <div className=\"card\">\r\n          <h3>Pagesat Totale Mujor (MKD)</h3>\r\n          <p>{totalPaymentsThisMonth.toFixed(2)}</p>\r\n        </div>\r\n        <div className=\"card\">\r\n          <h3>Konsumatori me Konsumin më të Lartë</h3>\r\n          <p>\r\n            {topConsumer\r\n              ? `${topConsumer.name} ${topConsumer.surname}`\r\n              : \"Nuk ka lexime\"}\r\n          </p>\r\n        </div>\r\n        <div className=\"card\">\r\n          <h3>Numri i Leximeve Mujore</h3>\r\n          <p>{readingsCountThisMonth}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}